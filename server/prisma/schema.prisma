generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model Invitation {
  id        String           @id @default(cuid())
  email     String           @unique
  token     String           @unique
  role      Role
  expiresAt DateTime
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())

  // Who sent the invitation
  inviterId String
  inviter   User   @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
}

// ======== AGENCY MANAGEMENT MODELS ========

model Agency {
  id                         String   @id @default(cuid())
  name                       String
  isActive                   Boolean  @default(true)
  isSuspended                Boolean  @default(false)
  hasScheduleV2              Boolean  @default(true)
  hasEMAR                    Boolean  @default(false)
  hasFinance                 Boolean  @default(false)
  isWeek1And2ScheduleEnabled Boolean  @default(false)
  hasPoliciesAndProcedures   Boolean  @default(false)
  isTestAccount              Boolean  @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  users           User[]
  clients         Client[]
  schedules       Schedule[]
  invoices        Invoice[]
  mileageRecords  MileageRecord[]
  documents       Document[]               @relation("AgencyDocuments")
  incidentReports IncidentReport[]
  medications     MedicationDatabaseLink[]
}

model User {
  id              String       @id @default(cuid())
  cognitoId       String       @unique
  email           String       @unique
  firstName       String
  lastName        String
  role            Role
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  sentInvitations Invitation[] @relation("SentInvitations")

  // Agency relationship
  agencyId String?
  agency   Agency? @relation(fields: [agencyId], references: [id], onDelete: SetNull)

  // User management
  invitedById  String?
  invitedBy    User?   @relation("UserInvites", fields: [invitedById], references: [id], onDelete: SetNull)
  invitedUsers User[]  @relation("UserInvites")

  // Client care relationships
  careAssignments ClientCareAssignment[]
  schedules       Schedule[]
  careReports     Report[]               @relation("ReportCaregiver")

  // Other relationships
  profile           Profile?
  sentMessages      Message[]          @relation("MessageSender")
  receivedMessages  Message[]          @relation("MessageReceiver")
  medicationRecords MedicationRecord[]
  mileageRecords    MileageRecord[]
  documents         Document[]         @relation("UserDocuments")
  incidentReports   IncidentReport[]
}

model MedicationDatabaseLink {
  id           String  @id @default(cuid())
  name         String
  isSpecialist Boolean @default(false)
  url          String
  source       String

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

// ======== CLIENT/CARE DATA MODELS ========

model Client {
  id             String   @id @default(cuid())
  agencyId       String
  title          String?
  firstName      String
  lastName       String
  clientId       String?  @unique
  addressLine1   String
  addressLine2   String?
  townOrCity     String
  county         String
  postalCode     String
  propertyAccess String?
  phoneNumber    String?
  nhsNumber      String?
  dnraOrder      Boolean? @default(false)
  chargeRate     Float?   @default(25.0) // Default charge rate for client

  // Care-specific information
  mobility      String?
  likesDislikes String?
  dateOfBirth   DateTime?
  languages     String?
  allergies     String?
  interests     String?
  history       String?

  // Related data
  keyContacts     KeyContact[]
  careOutcomes    CareOutcome[]
  careAssignments ClientCareAssignment[]
  schedules       Schedule[]
  reports         Report[]               @relation("ReportClient")
  medications     MedicationRecord[]
  documents       Document[]             @relation("ClientDocuments")
  mileageRecords  MileageRecord[]
  invoices        Invoice[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agency Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model ClientCareAssignment {
  id              String   @id @default(cuid())
  clientId        String
  userId          String
  isDecisionMaker Boolean  @default(false)
  assignedAt      DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clientId, userId])
}

// ======== CARE DELIVERY MODELS ========

model Schedule {
  id         String         @id @default(cuid())
  agencyId   String
  clientId   String // Client receiving care
  userId     String // Care worker assigned
  date       DateTime // Date of appointment
  shiftStart DateTime // Start time
  shiftEnd   DateTime // End time
  status     ScheduleStatus // Status of appointment
  type       ScheduleType // Type of visit
  notes      String? // Optional notes about the appointment
  chargeRate Float? // Client charge rate for this specific appointment
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  agency Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Report {
  id           String    @id @default(cuid())
  clientId     String
  userId       String
  condition    String
  summary      String
  checkInTime  DateTime
  checkOutTime DateTime?
  createdAt    DateTime  @default(now())

  tasksCompleted ReportTask[]

  client    Client @relation("ReportClient", fields: [clientId], references: [id], onDelete: Cascade)
  caregiver User   @relation("ReportCaregiver", fields: [userId], references: [id], onDelete: Cascade)
}

model ReportTask {
  id        String  @id @default(cuid())
  reportId  String
  taskName  String
  completed Boolean @default(false)

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model MedicationRecord {
  id             String   @id @default(cuid())
  userId         String
  clientId       String?
  medication     String
  dosage         String
  frequency      String
  administeredAt DateTime
  notes          String?

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  client Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)
}

// ======== SHARED/SUPPORT MODELS ========

model Invoice {
  id          String        @id @default(cuid())
  agencyId    String
  clientId    String?
  amount      Float
  description String
  issuedAt    DateTime      @default(now())
  dueDate     DateTime
  status      InvoiceStatus

  agency Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)
}

model MileageRecord {
  id       String   @id @default(cuid())
  agencyId String
  userId   String
  clientId String?
  distance Float
  date     DateTime @default(now())
  notes    String?

  agency Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  client Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)
}

model Document {
  id         String   @id @default(cuid())
  title      String
  fileUrl    String
  uploadedAt DateTime @default(now())

  // Optional relations - a document can belong to any of these
  userId   String?
  clientId String?
  agencyId String?

  user   User?   @relation("UserDocuments", fields: [userId], references: [id], onDelete: SetNull)
  client Client? @relation("ClientDocuments", fields: [clientId], references: [id], onDelete: SetNull)
  agency Agency? @relation("AgencyDocuments", fields: [agencyId], references: [id], onDelete: SetNull)
}

model Profile {
  id        String  @id @default(cuid())
  userId    String  @unique
  phone     String?
  avatarUrl String?
  address   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IncidentReport {
  id          String        @id @default(cuid())
  reporterId  String
  agencyId    String
  description String
  severity    SeverityLevel
  reportedAt  DateTime      @default(now())

  reporter User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  sentAt     DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model KeyContact {
  id       String  @id @default(cuid())
  clientId String
  name     String
  relation String
  phone    String
  email    String?

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model CareOutcome {
  id       String @id @default(cuid())
  clientId String
  outcome  String

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

// ======== ENUMS ========

enum Role {
  SOFTWARE_OWNER
  ADMIN
  HEALTH_WORKER
  OFFICE_STAFF
  CLIENT
  FAMILY
}

enum ScheduleStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum ScheduleType {
  WEEKLY_CHECKUP
  APPOINTMENT
  HOME_VISIT
  OTHER
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELED
}
