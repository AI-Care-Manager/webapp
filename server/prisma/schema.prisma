generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model Invitation {
  id        String           @id @default(cuid())
  email     String           @unique
  token     String           @unique
  role      Role
  subRole   SubRole? // Added subRole field
  expiresAt DateTime
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())

  // Who sent the invitation
  inviterId String
  inviter   User   @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
}

// ======== AGENCY MANAGEMENT MODELS ========

model Agency {
  id                         String   @id @default(cuid())
  name                       String
  isActive                   Boolean  @default(true)
  isSuspended                Boolean  @default(false)
  hasScheduleV2              Boolean  @default(true)
  hasEMAR                    Boolean  @default(false)
  hasFinance                 Boolean  @default(false)
  isWeek1And2ScheduleEnabled Boolean  @default(false)
  hasPoliciesAndProcedures   Boolean  @default(false)
  isTestAccount              Boolean  @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  users           User[]
  schedules       Schedule[]
  invoices        Invoice[]
  mileageRecords  MileageRecord[]
  documents       Document[]               @relation("AgencyDocuments")
  incidentReports IncidentReport[]
  medications     MedicationDatabaseLink[]
  visitTypes      VisitType[] // Added visit types
  riskCategories  RiskCategory[] // Added risk categories
}

model ClientCareAssignment {
  id              String   @id @default(cuid())
  clientId        String
  userId          String
  isDecisionMaker Boolean  @default(false)
  assignedAt      DateTime @default(now())

  client User @relation("ClientAssignments", fields: [clientId], references: [id], onDelete: Cascade)
  user   User @relation("CareWorkerAssignments", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clientId, userId])
}

model User {
  id              String       @id @default(cuid())
  cognitoId       String       @unique
  email           String       @unique
  firstName       String
  lastName        String
  role            Role
  subRole         SubRole? // Added subRole field
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  sentInvitations Invitation[] @relation("SentInvitations")

  // Agency relationship
  agencyId String?
  agency   Agency? @relation(fields: [agencyId], references: [id], onDelete: SetNull)

  // User management
  invitedById  String?
  invitedBy    User?   @relation("UserInvites", fields: [invitedById], references: [id], onDelete: SetNull)
  invitedUsers User[]  @relation("UserInvites")

  // Client-specific fields (only for users with CLIENT role)
  title          String?
  addressLine1   String?
  addressLine2   String?
  townOrCity     String?
  county         String?
  postalCode     String?
  propertyAccess String?
  phoneNumber    String?
  nhsNumber      String?
  dnraOrder      Boolean?  @default(false)
  chargeRate     Float?    @default(25.0)
  mobility       String?
  likesDislikes  String?
  dateOfBirth    DateTime?
  languages      String?
  allergies      String?
  interests      String?
  history        String?
  preferredName  String? // Added preferred name

  // Communication preferences - NEW
  communicationPreference CommunicationPreference?

  // Client care relationships
  careAssignments       ClientCareAssignment[] @relation("CareWorkerAssignments")
  clientAssignments     ClientCareAssignment[] @relation("ClientAssignments")
  careWorkerSchedules   Schedule[]             @relation("CareWorkerSchedules")
  clientSchedules       Schedule[]             @relation("ClientSchedules")
  careReports           Report[]               @relation("ReportCaregiver")
  clientReports         Report[]               @relation("ReportClient")
  careWorkerMedications MedicationRecord[]     @relation("CareWorkerMedications")
  clientMedications     MedicationRecord[]     @relation("ClientMedications")
  careWorkerMileage     MileageRecord[]        @relation("CareWorkerMileage")
  clientMileage         MileageRecord[]        @relation("ClientMileage")

  // Other relationships
  profile                   Profile?
  sentMessages              Message[]                  @relation("MessageSender")
  receivedMessages          Message[]                  @relation("MessageReceiver")
  medicationRecords         MedicationRecord[]
  mileageRecords            MileageRecord[]
  documents                 Document[]                 @relation("UserDocuments")
  incidentReports           IncidentReport[]
  keyContacts               KeyContact[]
  careOutcomes              CareOutcome[]
  Invoice                   Invoice[]
  Document                  Document[]
  Notification              Notification[]
  riskAssessments           RiskAssessment[] // Added risk assessments
  familyAccess              FamilyAccess[] // Added family access
  communicationLogs         CommunicationLog[] // Added communication logs
  reminders                 Reminder[] // Added reminders
  medicationAdministrations MedicationAdministration[] @relation("AdministeredMedications")
}

// NEW MODEL: Communication Preference
model CommunicationPreference {
  id     String  @id @default(cuid())
  userId String  @unique
  email  Boolean @default(true)
  sms    Boolean @default(false)
  phone  Boolean @default(true)
  notes  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NEW MODEL: Family Access
model FamilyAccess {
  id       String  @id @default(cuid())
  clientId String
  name     String
  relation String
  phone    String
  email    String?

  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model MedicationDatabaseLink {
  id           String  @id @default(cuid())
  name         String
  isSpecialist Boolean @default(false)
  url          String
  source       String

  agencyId         String
  agency           Agency             @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  MedicationRecord MedicationRecord[]
}

// ======== CARE DELIVERY MODELS ========

// NEW MODEL: Visit Type
model VisitType {
  id          String   @id @default(cuid())
  agencyId    String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  agency    Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  schedules Schedule[]
}

model Schedule {
  id         String       @id @default(cuid())
  agencyId   String
  clientId   String
  userId     String
  date       DateTime
  startTime  String
  endTime    String
  status     String       @default("PENDING")
  type       ScheduleType @default(APPOINTMENT)
  notes      String?
  chargeRate Float?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Added visit type relationship
  visitTypeId String?
  visitType   VisitType? @relation(fields: [visitTypeId], references: [id], onDelete: SetNull)

  agency Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client User   @relation("ClientSchedules", fields: [clientId], references: [id], onDelete: Cascade)
  user   User   @relation("CareWorkerSchedules", fields: [userId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([clientId])
  @@index([userId])
}

model Report {
  id           String    @id @default(cuid())
  clientId     String
  userId       String
  condition    String
  summary      String
  checkInTime  DateTime
  checkOutTime DateTime?
  createdAt    DateTime  @default(now())

  // Added location data
  checkInDistance  Float?
  checkOutDistance Float?

  tasksCompleted ReportTask[]

  client    User @relation("ReportClient", fields: [clientId], references: [id], onDelete: Cascade)
  caregiver User @relation("ReportCaregiver", fields: [userId], references: [id], onDelete: Cascade)
}

model ReportTask {
  id        String  @id @default(cuid())
  reportId  String
  taskName  String
  completed Boolean @default(false)

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model MedicationRecord {
  id           String    @id @default(cuid())
  medicationId String
  clientId     String
  userId       String
  dosage       String
  frequency    String
  startDate    DateTime
  endDate      DateTime?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Define which times this medication should be taken
  morningDose  Boolean @default(false)
  lunchDose    Boolean @default(false)
  eveningDose  Boolean @default(false)
  bedtimeDose  Boolean @default(false)
  asNeededDose Boolean @default(false)

  medication            MedicationDatabaseLink     @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  client                User                       @relation("ClientMedications", fields: [clientId], references: [id], onDelete: Cascade, map: "MedicationRecord_client_fkey")
  user                  User                       @relation("CareWorkerMedications", fields: [userId], references: [id], onDelete: Cascade, map: "MedicationRecord_care_worker_fkey")
  User                  User                       @relation(fields: [userId], references: [id])
  administrationRecords MedicationAdministration[]

  @@index([medicationId])
  @@index([clientId])
  @@index([userId])
}

model MedicationAdministration {
  id                 String   @id @default(cuid())
  medicationRecordId String
  administeredById   String
  administeredAt     DateTime
  doseType           DoseType
  doseTaken          Boolean  @default(true)
  notes              String?
  createdAt          DateTime @default(now())

  medicationRecord MedicationRecord @relation(fields: [medicationRecordId], references: [id], onDelete: Cascade)
  administeredBy   User             @relation("AdministeredMedications", fields: [administeredById], references: [id], onDelete: Cascade)

  @@index([medicationRecordId])
  @@index([administeredById])
}

// ======== SHARED/SUPPORT MODELS ========

model Invoice {
  id          String        @id @default(cuid())
  agencyId    String
  clientId    String?
  amount      Float
  description String
  issuedAt    DateTime      @default(now())
  dueDate     DateTime
  status      InvoiceStatus

  agency Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client User?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
}

model MileageRecord {
  id           String   @id @default(cuid())
  agencyId     String
  clientId     String
  userId       String
  date         DateTime
  startMileage Float
  endMileage   Float
  totalMiles   Float
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  agency Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client User   @relation("ClientMileage", fields: [clientId], references: [id], onDelete: Cascade, map: "MileageRecord_client_fkey")
  user   User   @relation("CareWorkerMileage", fields: [userId], references: [id], onDelete: Cascade, map: "MileageRecord_care_worker_fkey")
  User   User   @relation(fields: [userId], references: [id])

  @@index([agencyId])
  @@index([clientId])
  @@index([userId])
}

model Document {
  id         String   @id @default(cuid())
  title      String
  fileUrl    String
  uploadedAt DateTime @default(now())

  // Optional relations - a document can belong to any of these
  userId   String?
  clientId String?
  agencyId String?

  user   User?   @relation("UserDocuments", fields: [userId], references: [id], onDelete: SetNull)
  client User?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  agency Agency? @relation("AgencyDocuments", fields: [agencyId], references: [id], onDelete: SetNull)
}

model Profile {
  id        String  @id @default(cuid())
  userId    String  @unique
  phone     String?
  avatarUrl String?
  address   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IncidentReport {
  id          String        @id @default(cuid())
  reporterId  String
  agencyId    String
  description String
  severity    SeverityLevel
  reportedAt  DateTime      @default(now())

  reporter User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  sentAt     DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model KeyContact {
  id       String  @id @default(cuid())
  clientId String
  name     String
  relation String
  phone    String
  email    String?

  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model CareOutcome {
  id       String @id @default(cuid())
  clientId String
  outcome  String

  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

// NEW MODEL: Communication Log
model CommunicationLog {
  id        String   @id @default(cuid())
  clientId  String
  message   String
  createdAt DateTime @default(now())

  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

// NEW MODEL: Risk Category
model RiskCategory {
  id          String   @id @default(cuid())
  agencyId    String
  name        String
  description String?
  createdAt   DateTime @default(now())

  agency          Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  riskAssessments RiskAssessment[]
}

// NEW MODEL: Risk Assessment
model RiskAssessment {
  id                 String   @id @default(cuid())
  clientId           String
  riskCategoryId     String
  description        String
  affectedParties    String
  mitigationStrategy String
  likelihood         Int // 1-5 scale
  severity           Int // 1-5 scale
  riskScore          Int // likelihood * severity
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  client       User         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  riskCategory RiskCategory @relation(fields: [riskCategoryId], references: [id], onDelete: Cascade)
}

// NEW MODEL: Reminder
model Reminder {
  id        String   @id @default(cuid())
  clientId  String
  title     String
  message   String?
  dueDate   DateTime
  completed Boolean  @default(false)
  createdAt DateTime @default(now())

  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ======== ENUMS ========
enum Role {
  SOFTWARE_OWNER
  ADMIN
  CARE_WORKER
  OFFICE_STAFF
  CLIENT
  FAMILY
}

// NEW ENUM: SubRole
enum SubRole {
  // Office staff subroles
  FINANCE_MANAGER
  HR_MANAGER
  CARE_MANAGER
  SCHEDULING_COORDINATOR
  OFFICE_ADMINISTRATOR
  RECEPTIONIST
  QUALITY_ASSURANCE_MANAGER
  MARKETING_COORDINATOR
  COMPLIANCE_OFFICER

  // Care worker subroles
  CAREGIVER
  SENIOR_CAREGIVER
  JUNIOR_CAREGIVER
  TRAINEE_CAREGIVER
  LIVE_IN_CAREGIVER
  PART_TIME_CAREGIVER
  SPECIALIZED_CAREGIVER
  NURSING_ASSISTANT

  // Client subroles
  SERVICE_USER
  FAMILY_AND_FRIENDS
  OTHER
}

enum ScheduleStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum ScheduleType {
  WEEKLY_CHECKUP
  APPOINTMENT
  HOME_VISIT
  CHECKUP
  EMERGENCY
  ROUTINE
  OTHER
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELED
}

enum NotificationType {
  SCHEDULE
  REPORT
  DOCUMENT
  SYSTEM
  ALERT
}

enum DoseType {
  MORNING
  LUNCH
  EVENING
  BEDTIME
  AS_NEEDED
}
